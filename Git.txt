Git学习笔记

工作区--修改文件Ctrl+S保存在硬盘
缓存区--通过git add把文件保存在缓存区
仓库--	最终存放点

安装好后,设置用户名、密码,和GitHub不一样不知道可不可以
$ git config --global user.name "liaozidi"

安装本地 ssh-key,在目录下.ssh文件夹打开id_rsa.pub复制秘钥,到GitHub设置保存
$ ssh-keygen -t rsa -C "706445492@qq.com"

创建一个文件夹
$ mkdir aidis
查看当前目录
$ pwd
查看哪些哪些被修改
$ git status
查看文件的具体修改内容
$ git diff demo.txt

通过git init把目录变成git项目
$ git init
Initialized empty Git repository in C:/Users/Administrator/aidis/.git/

++++++++++++++++++++++++++++++时光穿梭机++++++++++++++++++++++++++++++++++++

在aidis文件夹操作项目

保存一个文件到缓存区, 可反复多次添加多个文件,然后一次保存仓库
$ git add demo.txt

查看某个文件在缓存区与仓库的区别
$ git diff HEAD -- demo.txt

把文件提交到仓库(本地)
$ git commit -m "注释内容"

文件多次编辑保存后 $ git log 查看 如果嫌输出信息, 可以加上--pretty=oneline参数

把文件回退到上一个版本
$ git reset --hard HEAD^
回到具体某个版本, 版本号用 git log查看时有 不用写全 会自动查找
$ git reset --hard 1094a

丢弃某个文件的在工作区的修改 回退到仓库版本
$ git checkout -- demo.txt

把某个文件的在缓存区的修改撤销 把修改回退到工作区
$ git reset HEAD demo.txt

删除工作区文件
$ rm test.txt

删除版本库的文件 并且git commit文件就从版本库中被删除了。
$ git rm test.txt
如果删错了 可以使用上边回退命令 checkout 恢复


+++++++++++++++++++++++远程仓库 GitHub 代码托管+++++++++++++++++++++++++++++

登陆GitHub，然后，在右上角找到“Create a new repo”按钮  创建一个新的仓库 
在Repository name填入名称  其他保持默认设置 复制SSH链接

添加后，远程库的名字就是origin  这是Git默认的叫法
也可以改成别的  但是origin这个名字一看就知道是远程库
$ git remote add origin git@github.com:liaozidi/aidis.git

然后把本地仓库所有内容推送到远程库上  第一次需要加 -u 关联master分支
$ git push -u origin master

从仓库克隆一个 克隆tp5
$ git clone git@github.com:top-think/think.git


++++++++++++++++++++++++++++++++++标签管理++++++++++++++++++++++++++++

“请把上周一的那个版本打包发布，commit号是6a5819e...”

“一串乱七八糟的数字不好找！”

如果换一个办法：

“请把上周一的那个版本打包发布，版本号是v1.2”

创建标签
$ git tag v1.0
查看所有标签
$ git tag
删除标签
$ git tag -d v0.1
推送标签到远程 
$git push origin v0.1
一次性推送所有未推送标签到远程
$ git push origin --tags
删除远程标签
$ git push origin :refs/tags/v0.9



+++++++++++++++++++++++++++++分支管理(平行宇宙)++++++++++++++++++++++++++++++++++

在Git里 只有一条时间线 这个分支叫主分支 即 master分支

创建dev分支 并切换到dev
$ git checkout -b dev 
Switched to a new branch 'dev'

切换到 dev 分支
$ git checkout dev

查看分支 当前所在分支会有*号 
$ git branch

在当前分支进行的操作是独立的 提交是在dev分支上，而master分支此刻并没有变

将dev分支的工作成果合并到master分支上
$ git merge dev

删除分支
$ git branch -d dev

如果有两个子分支dev与fea  